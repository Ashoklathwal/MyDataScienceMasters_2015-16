?prop.table
?createFolds
??createFolds
library(caret)
?trainControl
??knnImpute
install.packages('splines')
install.packages("splines")
install.packages("rattle")
?ctreeBag
??ctreeBag
?bag
?rfcv
??rfcv
install.packages('clue')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
train <- segmentationOriginal[which(segmentationOriginal$Case=="Train"),]
test <- segmentationOriginal[which(segmentationOriginal$Case=="Test"),]
set.seed(125)
model <- train(Case ~ ., method="rpart", data = train, na.action = "na.omit")
is.na(train)
table(is.na(train))
model <- train(Case ~ ., method="rpart", data = train)
set.seed(125)
model <- train(Case ~ ., method="rpart", data = train)
set.seed(125)
model <- train(Case ~ ., method="rpart", data = train)
train(Case ~ . , method = "rpart", data = train)
,zlm
trainpml <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testpml <- read.csv("pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
setwd("C:/Users/steph_000.STEPHANIE/Courseradatascience/Practical machine learning")
trainpml <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testpml <- read.csv("pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
library(caret)
intrain <- createDataPartition(y = trainpml$classe, p=0.6, list=FALSE)
training <- trainpml[intrain,]
testing <- trainpml[-intrain,]
trainproc <- training[,colSums(is.na(training)) == 0]
trainproc <- trainproc[,c(2,8:60)]
ncol(trainproc)
for (i in 2:ncol(trainproc)) {
if(class(trainproc[,i])=="integer"){
trainproc[,i] <- as.numeric(trainproc[,i])
}
}
sapply(trainproc, class)
findCorrelation(cor(trainproc[,-c(1,54)]), cutoff = 0.8, verbose = TRUE)
trainproc <- trainproc[,-c(11,2,10,37,9,3,35,22,26,19)]
ncol(trainproc)
library(randomForest)
modfit <- randomForest(x=trainproc[,2:43],y=trainproc$classe, importance = FALSE)
modfit
print(modfit)
class(modfit)
modfit$classes
modfit$class.error
modfit$err.rate
sum(modfit$err.rate)
varImpPlot(modfit, sort = TRUE, n.var = 20, main = "Variables importance")
varimpo <- varImpPlot(modfit, sort = TRUE, n.var = 20, main = "Variables importance")
View(varimpo)
varimpo <- varImpPlot(modfit, sort = TRUE, n.var = 10, main = "Variables importance")
varimpo <- varImpPlot(modfit, sort = FALSE, n.var = 10, main = "Variables importance")
View(varimpo)
View(trainproc)
print(modfit)
modfit$type
modfit$confusion
modfit$confusion$class.error
modfit$predicted
modfit$importance
modfit$forest
modfit$inbag
View(modfit$confusion)
sum(modfit$confusion$class.error)
class(modfit$confusion)
confusionMatrix(modfit, data = testproc)
confusionMatrix(modfit, data = trainproc)
modfit2 <- train(x=trainproc[,2:43],y=trainproc$classe, method="rf", importance = TRUE)
names(modfit$confusion)
row.names(modfit$confusion)
results <- data.frame(pred = predict(modfit, trainproc[,2:43]),
obs = trainproc$classe)
p <- ggplot(results, aes(x = pred, y = obs))
p <- p + geom_jitter(position = position_jitter(width = 0.25, height = 0.25))
p
testproc <- testing[,colSums(is.na(testing)) == 0]
ncol(testproc)
testproc <- testproc[,c(2,8:60)]
ncol(testproc)
for (i in 2:ncol(testproc)) {
if(class(testproc[,i])=="integer"){
testproc[,i] <- as.numeric(testproc[,i])
}
}
sapply(testproc, class)
testproc <- testproc[,-c(11,2,10,37,9,3,35,22,26,19)]
ncol(testproc)
results2 <- data.frame(pred = predict(modfit, testproc[,2:43]),
obs = testproc$classe)
p2 <- ggplot(results2, aes(x = pred, y = obs))
p2 <- p2 + geom_jitter(position = position_jitter(width = 0.25, height = 0.25))
p2
ncol(testproc)
pred <- predict(modfit,testproc);
table(pred,testproc$classe)
testproc$predRight <- pred==testproc$classe
confusionMatrix(modfit, data = trainproc)
summary(testproc$predRight)
View(results2)
nrow(testproc)
testproc$pred <- results2$pred
testproc$obs <- results2$obs
library(ggplot2)
qplot(obs,pred,colour=predRight,data=testproc,main="newdata Predictions")
p2 <- ggplot(results2, aes(x = pred, y = obs), color=pred==obs)
p2 <- p2 + geom_jitter(position = position_jitter(width = 0.25, height = 0.25))
p2
View(testpml)
names(testpml)
testpml$problem_id
testset <- predict(modfit, newdata = testpml)
testset <- predict(modfit, testpml)
testset <- testpml[,colSums(is.na(testpml)) == 0]
ncol(testproc)
ncol(testpml)
ncol(testset)
testset <- testset[,c(2,8:60)]
ncol(testset)
for (i in 2:ncol(testset)) {
if(class(testset[,i])=="integer"){
testset[,i] <- as.numeric(testset[,i])
}
}
sapply(testset, class)
testset <- testset[,-c(11,2,10,37,9,3,35,22,26,19)]
ncol(testset)
predtest <- predict(modfit, testset)
View(predtest)
predtest
class(predtest)
predtest1 <- as.character(predtest)
predtest1
class(predtest1)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
setwd("C:/Users/steph_000.STEPHANIE/Courseradatascience/Practical machine learning/answers")
pml_write_files(predtest1)

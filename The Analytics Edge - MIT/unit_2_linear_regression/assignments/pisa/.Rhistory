?prop.table
?createFolds
??createFolds
library(caret)
?trainControl
??knnImpute
install.packages('splines')
install.packages("splines")
install.packages("rattle")
?ctreeBag
??ctreeBag
?bag
?rfcv
??rfcv
install.packages('clue')
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
train <- segmentationOriginal[which(segmentationOriginal$Case=="Train"),]
test <- segmentationOriginal[which(segmentationOriginal$Case=="Test"),]
set.seed(125)
model <- train(Case ~ ., method="rpart", data = train, na.action = "na.omit")
is.na(train)
table(is.na(train))
model <- train(Case ~ ., method="rpart", data = train)
set.seed(125)
model <- train(Case ~ ., method="rpart", data = train)
set.seed(125)
model <- train(Case ~ ., method="rpart", data = train)
train(Case ~ . , method = "rpart", data = train)
,zlm
trainpml <- read.csv("pml-training.csv", na.strings = c("NA", "", "#DIV/0!"))
testpml <- read.csv("pml-testing.csv", na.strings = c("NA", "", "#DIV/0!"))
install.packages('xtable')
sessionInfo()
install.packages('shiny')
install.packages('googleVis')
demo(googleVis)
library(googleVis)
demo(googleVis)
install.packages('Rtools')
install.packages('devtools')
install.packages('installr')
install.Rtools(TRUE)
library(installr)
install.Rtools(TRUE)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='stephaniecnvs', token='6ECFD7B499BB07580CA878985155D0A1', secret='utwtZqtJ8JUL7vcT3KQp0eJasdsx/AqvcA2du/9W')
install.packages("viridis")
devtools::install_github("ropensci/plotly")
install_github('slidify', 'ramnathv')
devtools::install_github('slidify', 'ramnathv')
install.packages('curl')
install.packages("curl")
devtools::install_github('slidify', 'ramnathv')
devtools::install_github('slidifyLibraries', 'ramnathv')
setwd("C:/Users/steph_000.STEPHANIE/EdX analytics edge/unit_2/pisa")
training <- read.csv("pisa2009train.csv")
test <- read.csv("pisa2009test.csv")
str(training)
nrow(training)
tapply(training$readingScore, training$male, mean)
colSums(is.na(training))
training <- na.omit(training)
test <- na.omit(test)
str(training) ; str(test)
training$raceeth = relevel(training$raceeth, "White")
test$raceeth = relevel(test$raceeth, "White")
lmScore <- lm(readingScore ~ ., data = training)
summary(lmScore)
SSE = sum(lmScore$residuals^2)
RMSE = sqrt(SSE/nrow(training))
RMSE
predTest <- predict(lmScore, newdata = test)
summary(predTest)
637.7 - 353.2
SSEtest = sum((predTest - test$readingScore)^2)
RMSEtest = sqrt((mean(training$readingScore) - test$readingScore)^2)
RMSEtest
RMSEtest = sum((mean(training$readingScore) - test$readingScore)^2)
SSEtest
RMSEtest
RMSEtest = sqrt((mean(training$readingScore) - test$readingScore)^2)
RMSEtest
RMSEtest = sqrt((mean((training$readingScore) - test$readingScore)^2))
SSEtest
RMSEtest
RMSEtest = sqrt(mean((predTest-test$readingScore)^2))
SSEtest
RMSEtest
